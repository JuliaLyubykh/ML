import pandas as pd
import numpy as np
import seaborn as sns
import statsmodels
import matplotlib.pyplot as plt
from pylab import rcParams
from statsmodels.tsa.seasonal import seasonal_decompose
from sklearn.metrics import mean_squared_error, mean_absolute_error
from tbats import TBATS
from prophet import Ptophet
from pmdarima import auto_arima

data = pd.read_csv('data.csv', parse_data = ['data'])
data.head()

store, item = 1,1
data = data[(data['store'] == store) & (data['item'] == item)]
data = data.set_index('date')
data = data['sales']

test_size = 365
data_train = data.iloc[: - test_size]
data_test = data.iloc[-test-size:]

plt.figure(figsize = (15,5))
plt.plot(data_train, label = 'train')
plt.plot(data_test, label = 'test')
plt.legend()

_ = statsmodel.graphics.tsaplots.plot_acf(data_train, lw =3)

def add_method_comparisson(method: str, y_true, y_forecast, compare_table = None) ->pd.DataFrame:
  result_row = {'method': method, 'MSE': mean_squared_error(y_true = y_true, y_pred = y_forecast), 'MAE': mean_absolute_error(y_true = y_true, y_pred = y_forecast), 'MAPE': mean_absolute_percentage_error(y_true = y_true, y_pred = y_forecast)}
  if compare_tables is None:
    compare_table = pd.DataFrame([result_now])
  else:
    if method in list(compare_table['method']) :
      compare_table = compare_table[compare_table['method'] != method]
    compare_table = pd.concat([compare_table, pd.DataFrame([result_now])])
    compare_table.index = np.arrange(len(compare_table))
  return compare_table

#TBD...






