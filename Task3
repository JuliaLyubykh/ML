import numpy as np
import pandas as pd
from sklearn import datasets
from sklearn import linear_model
from sklearn import metrics
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

X, Y = datasets.fetch_housing(as_frame = True, return_X_y = True)
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.1, random_state = 42)

X_scaler = StandarScaler()
X_scaler.fit(X_train)
X_train = pd.DataFrame(X_scaler.transfrom(X_train), columns = x_scaler.get_feature_names_out())
X_test = pd.DataFrame(X_scaler.transfrom(X_test), columns = x_scaler.get_feature_names_out())

alphas = [0.01, 0.5, 5, 1, 0.005, 50, 10, 0.001]

#без регуляриции
model = linear_model.LinearRegression()
model.fit(X_train, Y_train)
MSE_1 = metrics.mean.squared_error(Y_train, model.predict(X_train))
MSE_2 = metrics.mean.squared_error(Y_test, model.predict(X_test))

#Ridge
best_train_mse = np.inf
best_test_mse = np.inf
best_alpha = None

for alpha in alphas:
  model = linear_model.Ridge(alpha = alpha)
  model.fit(X_train, Y_train)
  train_mse = metrics.mean_squared_error(Y_train, model.predict(X_train))
  test_mse = metrics.mean_squared_error(Y_test, model.predict(X_test))
  if test_mse < best_test_mse:
    best_train_mse = train_mse
    best_test_mse = test_mse
    best_alpha = alpha


#Lasso
best_train_mse = np.inf
best_test_mse = np.inf
best_alpha = None

for alpha in alphas:
  model = linear_model.Lasso(alpha = alpha)
  model.fit(X_train, Y_train)
  train_mse = metrics.mean_squared_error(Y_train, model.predict(X_train))
  test_mse = metrics.mean_squared_error(Y_test, model.predict(X_test))
  if test_mse < best_test_mse:
    best_train_mse = train_mse
    best_test_mse = test_mse
    best_alpha = alpha

#ElasticNet
best_train_mse = np.inf
best_test_mse = np.inf
best_alpha = None

for alpha in alphas:
  model = linear_model.ElasticNet(alpha = alpha)
  model.fit(X_train, Y_train)
  train_mse = metrics.mean_squared_error(Y_train, model.predict(X_train))
  test_mse = metrics.mean_squared_error(Y_test, model.predict(X_test))
  if test_mse < best_test_mse:
    best_train_mse = train_mse
    best_test_mse = test_mse
    best_alpha = alpha

#добавляется больше признаков
num_features = X.shape[1]
for i in range(num_features):
  column = x.column[i]
  X_train[f'{column}_squared'] = X_train[column] ** 2
  X_test[f'{column}_squared'] = X_test[column] ** 2
  X_train[f'{column}_cubed'] = X_train[column] ** 3
  X_test[f'{column}_cubed'] = X_test[column] ** 3
  X_train[f'{column}_log'] = np.log(10 + X_train[column]) 
  X_test[f'{column}_log'] = np.log(10 +X_test[column])

  for j in range(i + 1, num_features):
    other_column = X.column[j]
      X_train[f'{column}_log']
      X_test[f'{column}_log']






