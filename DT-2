import pandas as pd
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.merics import roc_auc_score, accuracy_score, f1_score

data = pd.read_csv('data.csv')
data.head(10)

categorical_features = []
numerical_features = []

data.isna().mean(axis = 0)

numerical_featues.append('Pclass')

data['Sex'].value_counts(dropna = False)
categorical_features.append('Sex')

data['Age'] = data['Age'].fillna(data['Age'].mean())
numerical_features.append('Age')

numerical_features.extend(['SibSp', 'Parch', 'Fare'])

embarked_stat = data['Embarked'].value_counts(dropna = False)
categorical_features.append('Embarked')

number_of_categorical = sum([data[field]].nunique(dropna = False) for field in categorical_features)

encoder = OneHotEncoder()
encoder.fit(data[categorical_features])
categories = []
for i, feature in enumerate(categorical_features):
  categories.extend([f'{feature} : {value}' for value in encoder.categories_[i]])
data.loc[:, categories] = encoder.transfrom(data[categorical_features]).toarray().astype(int)

features = numerical_features + categories
X = data[features]
y = data['Survived']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 42, stratify = y)

np.round(y_train.value_counts() / y_train.shape[0] * 100, 2)
np.round(y_tes.value_counts() / y_test.shape[0] * 100, 2)

tree = DecisionTreeClassifier()
tree.fit(X_train, y_train)

def get_metrics(model):
  results = []
  y_pred = model.predict_proba(X_train)
  roc_auc = roc_auc_score(y_train, y_pred[:, 1])
  acc = accuracy_score(y_train, y_pred.argmax(axis = 1))
  f1 = f1_score(y_train, y_pred.argmax(axis = 1))
  results.append(['Train', roc_auc, acc, f1])
  y_pred = model.predict_proba(X_test)
  roc_auc = roc_auc_score(y_test, y_pred[:, 1])
  acc = accuracy_score(y_test, y_pred.argmax(axis = 1))
  f1 = f1_score(y_test, y_pred.argmax(axis = 1))
  results.append(['Test', roc_auc, acc, f1])  
  return pd.DataFrame(columns = ['Group', 'ROC-AUC', 'Accuracy', 'F1'], data = results)

get_metrics(tree)

grid = {'max_depth' : [1, 2, 3, 5, 10, None], 'criterion': ['gini', 'entropy'], 'min_samples_leaf': [1, 5, 10, 50], 'min_impurity_decrease': [0.0, 0.01, 0.05, 0.1]}
search = GridSearchCV(tree, grid)
search.fit(X_train, y_train)

tree = DecisionTreeClassifier(**search.best_params_,)
tree.fit(X_train, y_train)

get_mterics(tree)

pd.DataFrame(data = {'feature': features, 'importance': tree.feature_importance_}).sort_values('importance', ascending = False).iloc[:10]

tree = DecisionTreeClassifier(max_depth = 2)
tree.fit(X_train, y_train)
plit_tree(tree, feature_names = features, fontsize = 7, proportion = True)

object = {'Plcass': 1, 'Age': 33, 'SibSp': 0, 'Parch': 2, 'Fare': 70, 'Sex: female': 1, 'Sex: male': 0, 'Embarked: C': 0, 'Embarked: Q': 0, 'Embarked: S': 1, 'Embarked: nan': 0}
object = pd.DataFrame(object, index = [0])
tree.predict_proba(object)
tree.predict_proba(object)





















