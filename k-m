import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

data = pd.read_csv('data.csv', sep = '\t')
data.info()
data.head(10)

data = data.dropna()
data.head(10)

data['Dt_Customer'] = pd.to_datetime(data['Dt_Customer'], format = '%d-%m-%y')

dates = []
for i in data['Dt_Customer']:
  i = i.date()
  dates.append(i)

print('Дата регистрации последнего клиента: ', max(dates))
print('Дата регистрации первого клиента: ', min(dates))

dates = pd.to_datetime(dates)

data['Customer_For'] = (dates.max() - dates).days
data['Customer_For'] = pd.to_numeric(data['Customer_For'], errors = 'coerce')

data['Age'] = 2014 - data['Year_Birth']
data['Spent'] = data['MntWines'] + data['MntFruits'] + data['MntMeatProducts'] + data['MntFishProducts'] + data['MntSweetProducts'] + data['MntGoldProds']
data['Living_With'] = data['Marital_Status'].replace({'Married': 'Partner', 'Together': 'Partner', 'Absurd': 'Single', 'Widow': 'Single', 'YOLO': 'Single', 'Divorced': 'Single', 'Alone': 'Single'})
data['Children'] = data['Kidhome'] + data['Teenhome']
data['Family_Size'] = data['Living_With'].replace({'Single': 1, 'Partner': 2}) + data['Children']
data['Is_Parent'] = np.where(data.Children > 0, 1, 0)
data['Education'] = data['Education'].replace({'Basic': 'Undergraduate', '2n Cycle': 'Undergraduate', 'Graduation': 'Undergraduate', 'Master': 'Postgraduate', 'PhD': 'Postgraduate'})
data = data.rename(columns = {'MntWines': 'Wines', 'MntFruits': 'Fruits', 'MntMeatProducts': 'Meat', 'MntFishProducts': 'Fish', 'MntSweetProducts': 'Sweets', 'MntGoldProds': 'Gold'})

to_drop = ['Marital_Status', 'Dt_Customer', 'Z_CostContact', 'Z_Revenue', 'Year_Birth']
data = data.drop(to_drop, axis = 1)

data[['Age', 'Income'].hist()]

data = data[(data['Age'] < 90)]
data = data[(data['Income'] < 600000)]
s = (data.dtypes == 'object')
object_cols = list(s[s].index)
print('Категориальные признаки: ', object_cols)

label_encoder = LabelEncoder()
for i in object_cols:
  data[i] = data[[i]].apply(label_encoder.fit_transform)

data_copy = data.copy()
cols_del = ['ID', 'AcceptedCmp3','AcceptedCmp4', 'AcceptedCmp5', 'AcceptedCmp1', 'AcceptedCmp2', 'Complain', 'Response']
data_copy = data_copy.drop(cols_del, axis = 1)

scaler = StandardScaler()
scaler.fit(data_copy)
scaled_data_copy = pd.DataFrame(scaler.transfrom(data_copy), columns = data_copy.columns)
scaled_data_copy.head(10)

pca = PCA(n_components = 2)
X_pca = pca.fit_transform(scaled_data_copy)

plt.scatter(X_pca[:, 0], X_pca[:, 1], c = 'red', marker = 'o', s = 50)
plt.title("PCA")
plt.xlabel('Component_1')
plt.ylabel('Component_2')
plt.show()

kmeans = KMeans(n_clusters = 4, random_state = 42)
kmeans.fit(X_pca)
kmeans_label = kmeans.predict(X_pca)
kmeans_score = silhouette_score(X_pca, kmeans_label)

plt.scatter(X_pca[:, 0], X_pca[:, 1], c = lmeans_label cmap = 'viridis', s = 50)
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c = 'blue', s = 200, alpha = 0.5, marker = 'X')
plt.title('Visualisation after PCA')
plt.xlabel('1_Component')
plt.ylabel('2_Component')
plt.grid(True)
plt.show()

Personal = ['Customer_For', 'Age', 'Children', 'Family_Size', 'Is_Parent', 'Income']

for i in Personal:
  plt.figure()
  plt.scatterplot(data = data, x = data[i], y = data['Spent'], hue = data['Clusters'], palette = 'viridis')
  plt.show()




